<%- include('../components/template') %>
<main id="content">
   <%
      function formatLastUpdated(dateString) {
         const date = new Date(dateString);
         const now = new Date();
         const diffTime = Math.abs(now - date);
         const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
         if (diffDays > 30) {
           return date.toLocaleString('en-US', { 
             year: 'numeric', 
             month: 'short', 
             day: 'numeric', 
             hour: 'numeric', 
             minute: '2-digit', 
             hour12: true 
           });
         } else {
           return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
         }
       }
       %>
   <%
      function getFileIcon(purpose) {
        const icons = {
          programming: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5 text-blue-400">
           <path fill-rule="evenodd" d="M4.25 2A2.25 2.25 0 0 0 2 4.25v11.5A2.25 2.25 0 0 0 4.25 18h11.5A2.25 2.25 0 0 0 18 15.75V4.25A2.25 2.25 0 0 0 15.75 2H4.25Zm4.03 6.28a.75.75 0 0 0-1.06-1.06L4.97 9.47a.75.75 0 0 0 0 1.06l2.25 2.25a.75.75 0 0 0 1.06-1.06L6.56 10l1.72-1.72Zm4.5-1.06a.75.75 0 1 0-1.06 1.06L13.44 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06l2.25-2.25a.75.75 0 0 0 0-1.06l-2.25-2.25Z" clip-rule="evenodd" />
         </svg>
         `,
          webDevelopment: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5 text-blue-400">
           <path fill-rule="evenodd" d="M4.25 2A2.25 2.25 0 0 0 2 4.25v11.5A2.25 2.25 0 0 0 4.25 18h11.5A2.25 2.25 0 0 0 18 15.75V4.25A2.25 2.25 0 0 0 15.75 2H4.25Zm4.03 6.28a.75.75 0 0 0-1.06-1.06L4.97 9.47a.75.75 0 0 0 0 1.06l2.25 2.25a.75.75 0 0 0 1.06-1.06L6.56 10l1.72-1.72Zm4.5-1.06a.75.75 0 1 0-1.06 1.06L13.44 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06l2.25-2.25a.75.75 0 0 0 0-1.06l-2.25-2.25Z" clip-rule="evenodd" />
         </svg>
         `,
          textDocument: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5 text-blue-400">
           <path fill-rule="evenodd" d="M4.5 2A1.5 1.5 0 0 0 3 3.5v13A1.5 1.5 0 0 0 4.5 18h11a1.5 1.5 0 0 0 1.5-1.5V7.621a1.5 1.5 0 0 0-.44-1.06l-4.12-4.122A1.5 1.5 0 0 0 11.378 2H4.5Zm2.25 8.5a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5h-6.5Zm0 3a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5h-6.5Z" clip-rule="evenodd" />
          </svg>`,
          other: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5 text-neutral-400">
           <path fill-rule="evenodd" d="M4.25 12a.75.75 0 0 1 .75-.75h14a.75.75 0 0 1 0 1.5H5a.75.75 0 0 1-.75-.75Z" clip-rule="evenodd" />
         </svg>
         `
        };
      
        return icons[purpose] || icons.other;
      }
      %>
   <div class="bg-transparent">
      <div class="sm:flex sm:items-center px-8 pt-4">
         <div class="sm:flex-auto">
            <h1 class="text-xl font-semibold leading-6 text-white">File Manager</h1>
            <p class="mt-1 text-sm text-neutral-400">Manage files and folders for this server.</p>
         </div>
         <% let query = req.query.path ? '?path=' + req.query.path : ''; %>
         <div class="mt-4 sm:ml-16 sm:mt-0 flex space-x-3">
            <input type="text" id="searchInput2" placeholder="Search files..." class="px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-md text-white placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm w-64">
            <a href="/instance/<%= req.params.id %>/files/create<%= query %>" class="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
               </svg>
               New File
            </a>
            <a href="/instance/<%= req.params.id %>/files/folder/create<%= query %>" class="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4l2 2h4a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
               </svg>
               New Folder
            </a>
            <button id="uploadBtn" class="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
               <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
               </svg>
               Upload
            </button>
            <input type="file" id="fileInput" multiple style="display: none;">
         </div>
      </div>
   </div>
   <%- include('../components/instance') %>
   <div class="px-8 pt-4">
      <div class="flex items-center justify-between mb-4">
         <div class="flex items-center">
            <h1 class="text-sm text-neutral-300">
               <a class="text-blue-400 hover:text-blue-300 transition" href="./files">/home/container/</a>
               <% 
                  if (req.query.path) { 
                      const parts = req.query.path.split('/');
                      let currentPath = '';
          
                      parts.forEach((part, index) => {
                          currentPath += part;
          
                          if (index < parts.length - 1) {
                              %>
                              <a href="./files?path=<%= currentPath %>" class="text-blue-400 hover:text-blue-300 transition"><%= part %></a>/
                              <% 
                              currentPath += '/';
                          } else {
                              %>
                              <span class="text-neutral-100"><%= part %></span>
                              <%
                          }
                      });
                  }
               %>
            </h1>
         </div>
         <p id="diskUsage" class="text-sm text-neutral-400"></p>
      </div>
      
      <div class="bg-neutral-800 rounded-lg shadow overflow-hidden border border-neutral-700">
         <table class="min-w-full divide-y divide-neutral-700">
            <thead class="bg-neutral-800">
               <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-300 uppercase tracking-wider">
                     <input type="checkbox" id="selectAll" class="h-4 w-4 text-blue-600 border-neutral-600 rounded bg-neutral-700 focus:ring-blue-500">
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-300 uppercase tracking-wider">Name</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-300 uppercase tracking-wider">Size</th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-300 uppercase tracking-wider">Modified</th>
                  <th scope="col" class="relative px-6 py-3">
                     <span class="sr-only">Actions</span>
                  </th>
               </tr>
            </thead>
            <tbody class="bg-neutral-800 divide-y divide-neutral-700">
               <% files.filter(file => file.isDirectory).forEach(function(directory) { %>
                  <% let currentPath = req.query.path ? req.query.path + '/' : ''; %>
                  <% let extension = req.query.path ? '?path=' + req.query.path : ''; %>
                  <tr class="hover:bg-neutral-750 transition-colors">
                     <td class="px-6 py-4 whitespace-nowrap">
                        <input type="checkbox" class="h-4 w-4 text-blue-600 border-neutral-600 rounded bg-neutral-700 focus:ring-blue-500 file-checkbox" data-filename="<%= directory.name %>">
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                           <div class="flex-shrink-0 h-5 w-5 text-blue-400">
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                 <path d="M3.75 3A1.75 1.75 0 0 0 2 4.75v3.26a3.235 3.235 0 0 1 1.75-.51h12.5c.644 0 1.245.188 1.75.51V6.75A1.75 1.75 0 0 0 16.25 5h-4.836a.25.25 0 0 1-.177-.073L9.823 3.513A1.75 1.75 0 0 0 8.586 3H3.75ZM3.75 9A1.75 1.75 0 0 0 2 10.75v4.5c0 .966.784 1.75 1.75 1.75h12.5A1.75 1.75 0 0 0 18 15.25v-4.5A1.75 1.75 0 0 0 16.25 9H3.75Z" />
                              </svg>
                           </div>
                           <div class="ml-4">
                              <a href="/instance/<%= req.params.id %>/files?path=<%= currentPath %><%= directory.name %>" class="text-sm font-medium text-blue-400 hover:text-blue-300">
                                 <%= directory.name %>
                              </a>
                           </div>
                        </div>
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-400">
                        —
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-400">
                        —
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium relative">
                        <button onclick="toggleDropdown(event, '<%= directory.name %>')" class="text-neutral-400 hover:text-white transition">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                           </svg>
                        </button>
                        <div id="dropdown-<%= directory.name %>" class="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-neutral-800 ring-1 ring-black ring-opacity-5 z-10 transform opacity-0 scale-95 transition-all duration-200 ease-out pointer-events-none border border-neutral-700">
                           <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                              <a href="#" onclick="openRenameModal('<%= directory.name %>', '<%= extension %>')" class="block px-4 py-2 text-sm text-neutral-300 hover:bg-neutral-700 hover:text-white transition" role="menuitem">Rename</a>
                              <a href="#" onclick="openDeleteModal('<%= directory.name %>', '<%= extension %>')" class="block px-4 py-2 text-sm text-red-500 hover:bg-neutral-700 hover:text-red-400 transition" role="menuitem">Delete</a>
                           </div>
                        </div>
                     </td>
                  </tr>
               <% }); %>
         
               <% files.filter(file => !file.isDirectory).forEach(function(file) { %>
                  <% let extension = req.query.path ? '?path=' + req.query.path : ''; %>
                  <tr class="hover:bg-neutral-750 transition-colors">
                     <td class="px-6 py-4 whitespace-nowrap">
                        <input type="checkbox" class="h-4 w-4 text-blue-600 border-neutral-600 rounded bg-neutral-700 focus:ring-blue-500 file-checkbox" data-filename="<%= file.name %>">
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                           <div class="flex-shrink-0 h-5 w-5 text-blue-400">
                              <%- getFileIcon(file.purpose) %>
                           </div>
                           <div class="ml-4">
                              <a href="/instance/<%= req.params.id %>/files/view/<%= file.name %><%= extension %>" class="text-sm font-medium text-blue-400 hover:text-blue-300">
                                 <%= file.name %>
                              </a>
                           </div>
                        </div>
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-400">
                        <%= file.size %>
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-400">
                        <%= formatLastUpdated(file.lastUpdated) %>
                     </td>
                     <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium relative">
                        <button onclick="toggleDropdown(event, '<%= file.name %>')" class="text-neutral-400 hover:text-white transition">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                           </svg>
                        </button>
                        <div id="dropdown-<%= file.name %>" class="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-neutral-800 ring-1 ring-black ring-opacity-5 z-10 transform opacity-0 scale-95 transition-all duration-200 ease-out pointer-events-none border border-neutral-700">
                           <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                              <a href="#" onclick="openRenameModal('<%= file.name %>', '<%= extension %>')" class="block px-4 py-2 text-sm text-neutral-300 hover:bg-neutral-700 hover:text-white transition" role="menuitem">Rename</a>
                              <a href="#" onclick="openDeleteModal('<%= file.name %>', '<%= extension %>')" class="block px-4 py-2 text-sm text-red-500 hover:bg-neutral-700 hover:text-red-400 transition" role="menuitem">Delete</a>
                           </div>
                        </div>
                     </td>
                  </tr>
               <% }); %>
            </tbody>
         </table>
      </div>
      
      <!-- prevent action bar from hiding files -->
      <div class="pb-12"></div>
   </div>
   
   <!-- Floating Action Bar -->
   <div id="floatingActionBar" class="fixed bottom-0 left-0 right-0 bg-neutral-800 border-t border-neutral-700 text-white py-3 px-6 transform translate-y-full transition-transform duration-300 ease-in-out flex justify-between items-center shadow-lg">
      <span id="selectedFilesCount" class="text-sm text-neutral-300">0 files selected</span>
      <button id="massDeleteBtn" class="inline-flex items-center rounded-md bg-red-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
         <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
         </svg>
         Delete
      </button>
   </div>
   
   <!-- Mass Delete Confirmation Modal -->
   <div id="massDeleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
      <div class="bg-neutral-800 rounded-lg p-6 max-w-md w-full transform scale-95 transition-transform duration-300 border border-neutral-700">
         <h2 class="text-xl font-semibold mb-4 text-white">Delete Files</h2>
         <p id="massDeleteMessage" class="mb-6 text-neutral-300"></p>
         <div class="flex justify-end space-x-3">
            <button onclick="closeMassDeleteModal()" class="px-4 py-2 bg-neutral-700 text-white rounded-md hover:bg-neutral-600 transition">Cancel</button>
            <button id="confirmMassDelete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-500 transition">Delete</button>
         </div>
      </div>
   </div>
   
   <!-- Delete Confirmation Modal -->
   <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
      <div class="bg-neutral-800 rounded-lg p-6 max-w-md w-full transform scale-95 transition-transform duration-300 border border-neutral-700">
         <h2 class="text-xl font-semibold mb-4 text-white">Delete File</h2>
         <p id="deleteMessage" class="mb-6 text-neutral-300"></p>
         <div class="flex justify-end space-x-3">
            <button onclick="closeDeleteModal()" class="px-4 py-2 bg-neutral-700 text-white rounded-md hover:bg-neutral-600 transition">Cancel</button>
            <button id="confirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-500 transition">Delete</button>
         </div>
      </div>
   </div>
   
   <!-- Rename Modal -->
   <div id="renameModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
      <div class="bg-neutral-800 rounded-lg p-6 max-w-md w-full transform scale-95 transition-transform duration-300 border border-neutral-700">
         <h2 class="text-xl font-semibold mb-1 text-white">Rename File</h2>
         <p class="mb-4 text-neutral-400 text-sm">Enter a new name for this file.</p>
         <input type="text" id="newFileName" class="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition mb-3" placeholder="Enter new file name">
         <p id="extensionWarning" class="text-yellow-400 text-sm mb-4 hidden">Warning: Changing the file extension may affect file functionality.</p>
         <div class="flex justify-end space-x-3">
            <button onclick="closeRenameModal()" class="px-4 py-2 bg-neutral-700 text-white rounded-md hover:bg-neutral-600 transition">Cancel</button>
            <button onclick="confirmRename()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition">Rename</button>
         </div>
      </div>
   </div>
   
   <!-- File Upload Modal -->
   <div id="uploadModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
      <div class="bg-neutral-800 rounded-lg p-6 max-w-md w-full transform scale-95 transition-transform duration-300 border border-neutral-700">
         <h2 class="text-xl font-semibold mb-4 text-white">Uploading Files</h2>
         <div class="mb-4">
            <div class="w-full bg-neutral-700 rounded-full h-2">
               <div id="uploadProgress" class="bg-blue-500 h-2 rounded-full" style="width: 0%"></div>
            </div>
         </div>
         <p id="uploadStatus" class="text-center text-neutral-400 text-sm">Preparing upload...</p>
      </div>
   </div>
   
   <script>
      function toggleDropdown(event, fileName) {
         event.stopPropagation();
         const dropdown = document.getElementById(`dropdown-${fileName}`);
         
         // Close other open dropdowns with animation
         document.querySelectorAll('[id^="dropdown-"]').forEach((el) => {
            if (el.id !== `dropdown-${fileName}` && !el.classList.contains('pointer-events-none')) {
               closeDropdown(el);
            }
         });
       
         // Toggle the clicked dropdown
         if (dropdown.classList.contains('pointer-events-none')) {
            openDropdown(dropdown);
         } else {
            closeDropdown(dropdown);
         }
      }
      
      function openDropdown(dropdown) {
         dropdown.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
         dropdown.classList.add('opacity-100', 'scale-100');
      }
      
      function closeDropdown(dropdown) {
         dropdown.classList.remove('opacity-100', 'scale-100');
         dropdown.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
      }
      
      // Close dropdowns when clicking outside
      document.addEventListener('click', function(event) {
         if (!event.target.closest('td')) {
            document.querySelectorAll('[id^="dropdown-"]').forEach((dropdown) => {
               if (!dropdown.classList.contains('pointer-events-none')) {
                  closeDropdown(dropdown);
               }
            });
         }
      });
      
      const searchInput2 = document.getElementById('searchInput2');
      const fileRows = document.querySelectorAll('tbody tr');
      
      searchInput2.addEventListener('input', function() {
         const searchTerm = this.value.toLowerCase();
         
         fileRows.forEach(row => {
            const fileName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
            if (fileName.includes(searchTerm)) {
               row.style.display = '';
            } else {
               row.style.display = 'none';
            }
         });
      });
      
      document.getElementById('uploadBtn').addEventListener('click', function() {
         document.getElementById('fileInput').click();
      });
      
      document.getElementById('fileInput').addEventListener('change', function(event) {
         const files = event.target.files;
         if (files.length === 0) return;
      
         const formData = new FormData();
         Array.from(files).forEach(file => formData.append('files', file));
      
         // Open the upload modal
         const modal = document.getElementById('uploadModal');
         modal.classList.remove('opacity-0', 'pointer-events-none');
         modal.querySelector('div').classList.remove('scale-95');
         modal.querySelector('div').classList.add('scale-100');
      
         const xhr = new XMLHttpRequest();
         xhr.open('POST', '/instance/<%= req.params.id %>/files/upload<%= query %>', true);
         xhr.upload.onprogress = function(e) {
            if (e.lengthComputable) {
               const percentComplete = (e.loaded / e.total) * 100;
               document.getElementById('uploadProgress').style.width = percentComplete + '%';
               document.getElementById('uploadStatus').textContent = 'Uploading: ' + Math.floor(percentComplete) + '%';
            }
         };
         xhr.onload = function() {
            if (xhr.status == 200) {
               document.getElementById('uploadStatus').textContent = 'Upload complete!';
               setTimeout(() => {
                  // Close the modal
                  modal.classList.add('opacity-0', 'pointer-events-none');
                  modal.querySelector('div').classList.remove('scale-100');
                  modal.querySelector('div').classList.add('scale-95');
                  // Reload the page
                  window.location.reload();
               }, 1000);
            } else {
               document.getElementById('uploadStatus').textContent = 'Upload failed. Server responded with status ' + xhr.status;
               setTimeout(() => {
                  // Close the modal
                  modal.classList.add('opacity-0', 'pointer-events-none');
                  modal.querySelector('div').classList.remove('scale-100');
                  modal.querySelector('div').classList.add('scale-95');
               }, 3000);
            }
         };
         xhr.send(formData);
         document.getElementById('fileInput').value = ''; // Reset file input
      });
      
      let deleteUrl = '';
      
      function openDeleteModal(fileName, extension) {
         const modal = document.getElementById('deleteModal');
         const message = document.getElementById('deleteMessage');
         deleteUrl = `/instance/<%= req.params.id %>/files/delete/${fileName}${extension}`;
         
         message.textContent = `Are you sure you want to delete "${fileName}"? This action cannot be undone.`;
         
         modal.classList.remove('opacity-0', 'pointer-events-none');
         modal.querySelector('div').classList.remove('scale-95');
         modal.querySelector('div').classList.add('scale-100');
      }
      
      function closeDeleteModal() {
         const modal = document.getElementById('deleteModal');
         modal.classList.add('opacity-0', 'pointer-events-none');
         modal.querySelector('div').classList.remove('scale-100');
         modal.querySelector('div').classList.add('scale-95');
      }
      
      document.getElementById('confirmDelete').addEventListener('click', function() {
         window.location.href = deleteUrl;
      });
      
      let currentFileName = '';
      let currentExtension = '';
      
      function openRenameModal(fileName, extension) {
         const modal = document.getElementById('renameModal');
         const input = document.getElementById('newFileName');
         currentFileName = fileName;
         currentExtension = extension;
         
         input.value = fileName;
         
         modal.classList.remove('opacity-0', 'pointer-events-none');
         modal.querySelector('div').classList.remove('scale-95');
         modal.querySelector('div').classList.add('scale-100');
      
         input.focus();
         input.setSelectionRange(0, fileName.lastIndexOf('.'));
      }
      
      function closeRenameModal() {
         const modal = document.getElementById('renameModal');
         modal.classList.add('opacity-0', 'pointer-events-none');
         modal.querySelector('div').classList.remove('scale-100');
         modal.querySelector('div').classList.add('scale-95');
      }
      
      function confirmRename() {
         const newFileName = document.getElementById('newFileName').value.trim();
         if (newFileName && newFileName !== currentFileName) {
            const encodedNewFileName = encodeURIComponent(newFileName);
            const renameUrl = `/instance/<%= req.params.id %>/files/rename/${currentFileName}/${encodedNewFileName}${currentExtension}`;
            window.location.href = renameUrl;
         } else {
            closeRenameModal();
         }
      }
      
      document.getElementById('newFileName').addEventListener('input', function(event) {
         const warningElement = document.getElementById('extensionWarning');
         const newExtension = event.target.value.split('.').pop();
         const originalExtension = currentFileName.split('.').pop();
         
         if (newExtension !== originalExtension) {
            warningElement.classList.remove('hidden');
         } else {
            warningElement.classList.add('hidden');
         }
      });
      
      // Mass actions functionality
      const selectAllCheckbox = document.getElementById('selectAll');
      const fileCheckboxes = document.querySelectorAll('.file-checkbox:not(#selectAll)');
      const floatingActionBar = document.getElementById('floatingActionBar');
      const selectedFilesCount = document.getElementById('selectedFilesCount');
      const massDeleteBtn = document.getElementById('massDeleteBtn');
      const massDeleteModal = document.getElementById('massDeleteModal');
      const massDeleteMessage = document.getElementById('massDeleteMessage');
      const confirmMassDeleteBtn = document.getElementById('confirmMassDelete');
      
      let selectedFiles = [];
      
      function updateSelectedFiles() {
         selectedFiles = Array.from(fileCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.dataset.filename);
      
         selectedFilesCount.textContent = `${selectedFiles.length} file${selectedFiles.length !== 1 ? 's' : ''} selected`;
      
         if (selectedFiles.length > 0) {
            floatingActionBar.classList.remove('translate-y-full');
         } else {
            floatingActionBar.classList.add('translate-y-full');
         }
      
         // Update the "select all" checkbox
         selectAllCheckbox.checked = fileCheckboxes.length > 0 && selectedFiles.length === fileCheckboxes.length;
      
         // Store the current state in sessionStorage
         sessionStorage.setItem('selectedFiles', JSON.stringify(selectedFiles));
      }
      
      function initializeSelectedFiles() {
         const storedSelectedFiles = JSON.parse(sessionStorage.getItem('selectedFiles') || '[]');
         fileCheckboxes.forEach(checkbox => {
            checkbox.checked = storedSelectedFiles.includes(checkbox.dataset.filename);
         });
         updateSelectedFiles();
      }
      
      selectAllCheckbox.addEventListener('change', function() {
         fileCheckboxes.forEach(checkbox => checkbox.checked = this.checked);
         updateSelectedFiles();
      });
      
      fileCheckboxes.forEach(checkbox => {
         checkbox.addEventListener('change', updateSelectedFiles);
      });
      
      massDeleteBtn.addEventListener('click', function() {
         massDeleteMessage.textContent = `Are you sure you want to delete ${selectedFiles.length} selected file${selectedFiles.length !== 1 ? 's' : ''}? This action cannot be undone.`;
         massDeleteModal.classList.remove('opacity-0', 'pointer-events-none');
         massDeleteModal.querySelector('div').classList.remove('scale-95');
         massDeleteModal.querySelector('div').classList.add('scale-100');
      });
      
      function closeMassDeleteModal() {
         massDeleteModal.classList.add('opacity-0', 'pointer-events-none');
         massDeleteModal.querySelector('div').classList.remove('scale-100');
         massDeleteModal.querySelector('div').classList.add('scale-95');
      }
      
      confirmMassDeleteBtn.addEventListener('click', async function() {
         closeMassDeleteModal();
         
         const deletePromises = selectedFiles.map(fileName => 
            fetch(`/instance/<%= req.params.id %>/files/delete/${fileName}<%= query %>`, { method: 'GET' })
         );
      
         try {
            await Promise.all(deletePromises);
            window.location.reload();
         } catch {
            console.error('Error deleting files:', error);
            alert('An error occurred while deleting files. Please try again.');
         }
      });
      
      // Initialize the state when the DOM is fully loaded
      document.addEventListener('DOMContentLoaded', initializeSelectedFiles);
      
      // Clear the stored state when leaving the page
      window.addEventListener('beforeunload', () => {
         sessionStorage.removeItem('selectedFiles');
      });
      
      // Initial update to set the correct state
      updateSelectedFiles();
   </script>
   
   <script>
      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
      const instanceId = '<%= req.params.id %>';
      
      function isValidJson(str) {
         try {
            JSON.parse(str);
         } catch (e) {
            return false;
         }
         return true;
      }
      
      function formatBytes(bytes, decimals = 2) {
         if (bytes === 0) return '0 Bytes';
         const k = 1024;
         const dm = decimals < 0 ? 0 : decimals;
         const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
         const i = Math.floor(Math.log(bytes) / Math.log(k));
         return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
      }
      
      const statsWs = new WebSocket(`${protocol}://${window.location.hostname}:${window.location.port}/stats/${instanceId}`);
      
      statsWs.onmessage = event => {
         if (isValidJson(event.data)) {
            const stats = JSON.parse(event.data);
            if (stats.error) {
               console.error('Error fetching stats:', stats.error);
               return;
            }
            
            const diskUsageRaw = parseFloat(stats.volumeSize);
            const diskLimitRaw = 10 * 1024; // Assuming 10GB limit
            const diskUsagePercent = (diskUsageRaw / diskLimitRaw * 100).toFixed(2);
            document.getElementById('diskUsage').textContent = `${formatBytes(diskUsageRaw * 1024 * 1024)} / ${formatBytes(diskLimitRaw * 1024 * 1024)} (${diskUsagePercent}%)`;
         } else {
            console.log('Received non-JSON data:', event.data);
         }
      }
   </script>
</main>
<%- include('../components/footer') %>
